:ruby
  if @rule.new_record?
    url = add_policy_rule_policy_path(@policy)
  else
    url = update_policy_rule_policy_path(@policy)
  end

  parent_rule = @policy.parent.policy_asset_type_rules.find_by(asset_type: @rule.asset_type) if @policy.parent

= simple_form_for(@rule,
  :url => url,
  :remote => true,
  :html => {:class => 'form-vertical', :autocomplete => 'off', :id => 'edit-form'},
  :wrapper => :vertical_form,
  :wrapper_mappings => {:check_boxes => :vertical_radio_and_checkboxes,
  :radio_buttons => :vertical_radio_and_checkboxes,
  :file => :vertical_file_input,
  :boolean => :vertical_boolean}) do |f|

  = f.input :id, :as => :hidden

  - if @rule.new_record?
    .row
      .col-xs-12
        = f.association :asset_type, :collection => @valid_types, :include_blank => false

  .row
    .col-xs-6
      = f.association :service_life_calculation_type, :include_blank => false, :disabled => parent_rule.present?

    .col-xs-6
      = f.association :replacement_cost_calculation_type, :include_blank => false

    .col-xs-4
      = f.input :annual_inflation_rate, :required => true, :input_html => {:min => 0.01, :max => 100}

    .col-xs-4
      = f.input :pcnt_residual_value, :required => true, :input_html => {:min => 0, :max => 100}

  .row
    = f.button :submit, "Save", :class => 'btn btn-primary'
    %button.btn.btn-default{:data => {:dismiss => "modal"}} Cancel

:javascript

  // validate the form before submittal
  $('#edit-form').validate({
    submitHandler: function(form) {
      $('#rule-modal').modal('hide');
      // Show the spinner while the form request is being handled
      $("#spinner").show();
      $(form).ajaxSubmit();
    }
  });
