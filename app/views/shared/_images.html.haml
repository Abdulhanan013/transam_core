:ruby
  table_dom_id = SecureRandom.hex

.table-responsive
  %table.table.table-hover{:id => table_dom_id,
          :data => {:toggle => 'table',
          :url => images_path(global_base_imagable: imagable.to_global_id, format: :json),
          :card_view => "false",
          :pagination => 'true',
          :sort_order => 'asc',
          :sortable => 'true',
          :side_pagination => 'server',
          :show_pagination_switch => 'false',
          :page_number => '1',
          :page_list => "[5, 10, 20, 50, 100, 200, 10000]",
          :page_size => current_user.num_table_rows,
          :search => 'false',
          :show_columns => 'true',
          :toolbar => "#table_actions",
          :row_style => 'row_style',
          :click_to_select => 'true',
          :show_export => 'true',
          :id_field => 'object_key',
          :export_types => "['csv', 'txt', 'excel']",
          :cookie => 'true',
          :cookie_id_table => "inventory_images_id",
          :cookie_expire => "1y",
          :maintain_selected => 'true',
          :single_select => 'false'}}
    %thead
      %tr
        %th.left{:data => {:field => :link_image, :sortable => 'false', :valign => 'middle'}} Photo
        - unless imagable.images.distinct.where.not(image_classification_id: nil).pluck(:image_classification_id).empty? # if some images are categorized
          %th.left{:data => {:field => :classification, :sortable => 'true', :valign => 'middle'}} Type
        %th.left{:data => {:field => :description, :sortable => 'true', :valign => 'middle'}} Description
        %th.left{:data => {:field => :creator, :sortable => 'true', :valign => 'middle'}} Creator
        %th.left{:data => {:field => :created_at, :sortable => 'true', :formatter => :date_time_formatter, :valign => 'middle'}} Created On
        %th.left{:data => {:field => :exportable, :formatter => :raw_boolean_string_formatter, :sortable => 'true', :valign => 'middle'}} Exportable
        %th.center{:data => {:field => :object_key, :sortable => 'true', :formatter => :image_actions_formatter, :valign => 'middle'}} Actions

= render :partial => 'shared/table_scripts', :locals => {:table_id => table_dom_id, :allow_row_click => 0}

:javascript

  $(document).ready(function() {
    $('#' + '#{table_dom_id}').bootstrapTable('resetWidth');

    // stub correct sorting field name
    var image_sorting_mappings = {
      classification: "image_classifications.name"
    };

    $('#' + '#{table_dom_id}').bootstrapTable({
      onLoadError: function(status, res) {
        alert('An error occurred loading images. Please try again.');
      },
      queryParams: function(params) {
        params.sort = params.sort || params.sortName;
        params.order = params.order || params.sortOrder;
        var sort_field = params.sort;
        var map_field = image_sorting_mappings[sort_field];
        if(map_field) {
          params.sort = map_field;
        }

        return params;
      }
    });
  });

  function imagable_formatter(value, data){
    if ((value == 'Element') || (value == 'Defect')) {
      return data.imagable_to_s;
    }
  };

  function image_actions_formatter(value, data) {

    if ('#{can? :create, @asset.images.build}' == 'true'){
      return '<div><a class="btn btn-primary" href="/images/'+ value + '/download" style="margin-bottom:10px"><i class="fa fa-download" style="padding-right:5px"></i>Download</a></div><div><a class="btn btn-warning" data-confirm="Are you sure you want to remove this image?" rel="nofollow" data-method="delete" href="/images/'+ value + '"><i class="fa fa-trash" style="padding-right:5px"></i>Delete</a></div>';
    } else {
      return '<a class="btn btn-primary" href="/images/'+ value + '/download"><i class="fa fa-download" style="padding-right:5px"></i>Download</a>';
    }

  };

  function date_time_formatter(value) {
    if (value) {
      return moment(value).format('MM/DD/YYYY hh:mm:ss A');
    } else {
      return value;
    }
  }

  function raw_boolean_string_formatter(value) {
    if (value) {
      return 'Yes';
    } else {
      return 'No';
    }
  }