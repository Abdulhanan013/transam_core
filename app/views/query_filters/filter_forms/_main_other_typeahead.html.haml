:ruby
  # This partial is to serve typeahead UI that populates data from a main lookup table and `other_xxx` field in assets table
  # e.g., manufacturers lookup table and other_manufacturer field in transam_assets table
  # inputs:
  #    main_field_name: e.g., manufacturer_id
  #    other_field_name: e.g., other_manufacturer
  #    data_url: the data path defined in query_filters_controller that serves as data API, e.g., manufacturers_query_filters_path

  main_field_id = QueryField.find_by(name: main_field_name).try(:id)
  other_field_id = QueryField.find_by(name: other_field_name).try(:id)
  if @pairs_with_filter
    filter_value_id = -1
    filter_value = @pairs_with_filter.value
  elsif @query_filter
    lookup_table = lookup_table_class.safe_constantize
    if lookup_table
      lookup_item = lookup_table.find_by_id(@query_filter.value)
      filter_value_id = lookup_item.try(:id)
      filter_value =lookup_item.try(lookup_table_name_field)
    end
  end

= hidden_field_tag :hidden_field_id, other_field_id

.form-group
  = text_field_tag main_field_name, filter_value, {:autocomplete => 'off', :class => 'form-control', :placeholder => 'Type ...', :data => {:url => data_url}}

:javascript
  $(function() {
    var main_field_id = #{main_field_id};
    var other_field_id = #{other_field_id};
    var field_name = "#{main_field_name}";
    
    function updateFilterDetails(item) {
      var item_id = item.id;
      var item_name = item.name;
      var query_field_id = main_field_id;
      var filter_value = item_id;

      if(item_id < 0) {
        query_field_id = other_field_id;
        filter_value = item_name;
        _saved_query.removeFilterDetails(main_field_id);
      } else {
        _saved_query.removeFilterDetails(other_field_id);
      }

      var filter_details = {
        query_field_id: query_field_id,
        op: '=',
        value: filter_value
      };

      _saved_query.setFilterDetails(query_field_id, filter_details);
    }

    if(#{filter_value_id.present?}) {
      updateFilterDetails({
        id: #{filter_value_id || -1},
        name: "#{filter_value}"
      });
    }

    function removeFilterDetails() {
      _saved_query.removeFilterDetails(main_field_id);
      _saved_query.removeFilterDetails(other_field_id);
    }

    // typeahead
    $('#' + field_name).on('focus', function() {
      _typeahead_source_url = $(this).data('url');
    });

    var last_selected = null;
    $('#' + field_name).typeahead({
      items: 10,
      minLength: 1,
      delay: 1000,
      changeInputOnSelect: false,
      changeInputOnMove: false,
      source: _typeahead_searcher,
      matcher: _typeahead_matcher,
      highlighter: _typeahead_highlighter,
      updater: function (obj) {
        var item = JSON.parse(obj);
        last_selected = item.name;
        // Update the UI
        updateFilterDetails(item);
        return item.name;
      }
    });

    $('#' + field_name).change(function() {
      if($(this).val() != last_selected) {
        removeFilterDetails();
      }
    });
  });